//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/KeypadInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeypadInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeypadInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeypadInput"",
    ""maps"": [
        {
            ""name"": ""KeypadExit"",
            ""id"": ""2e6a6036-90cd-4bb2-9ca4-110f645b9eb5"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""73c8a8c3-d7e9-49e7-97ba-1686b30f3fd3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1ef9fc6b-f1b9-4ffd-8c09-2605656f92df"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54be59c1-3d43-4fb2-b841-17ddbe8bb3b6"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeypadExit
        m_KeypadExit = asset.FindActionMap("KeypadExit", throwIfNotFound: true);
        m_KeypadExit_Exit = m_KeypadExit.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeypadExit
    private readonly InputActionMap m_KeypadExit;
    private IKeypadExitActions m_KeypadExitActionsCallbackInterface;
    private readonly InputAction m_KeypadExit_Exit;
    public struct KeypadExitActions
    {
        private @KeypadInput m_Wrapper;
        public KeypadExitActions(@KeypadInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_KeypadExit_Exit;
        public InputActionMap Get() { return m_Wrapper.m_KeypadExit; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeypadExitActions set) { return set.Get(); }
        public void SetCallbacks(IKeypadExitActions instance)
        {
            if (m_Wrapper.m_KeypadExitActionsCallbackInterface != null)
            {
                @Exit.started -= m_Wrapper.m_KeypadExitActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_KeypadExitActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_KeypadExitActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_KeypadExitActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public KeypadExitActions @KeypadExit => new KeypadExitActions(this);
    public interface IKeypadExitActions
    {
        void OnExit(InputAction.CallbackContext context);
    }
}
