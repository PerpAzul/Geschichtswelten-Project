//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerBasics"",
            ""id"": ""f7dbf2e8-e202-4c0e-9c56-b0705ecd11a4"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3f3c9930-db6f-4d97-9540-4eca91ab9c3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a40581af-0288-43be-9828-3f247e2bd17b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""16a38809-4960-4330-8821-cc03735d0d69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf08a7c8-0f8e-44a3-9244-49de44e1b8e1"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""ee5315b7-c5dd-44d8-8d0b-5a16d20c1bd0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0ca15b7b-dc82-44c8-b68a-81216d162dc9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""18b275ae-d234-49d1-a0b8-bba658f47797"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ebc553cb-eae0-4fc8-81f4-579a2b9d6bef"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c069db63-3135-42d3-bfcc-73a9d58dfe5d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f9539d1d-cd9e-463c-9b65-0a353ddaeb0c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17c94f4b-db51-4195-9b13-ec68a65c6ffe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27a2a8b7-36d9-42d0-9e11-f5edf9b6c8c8"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02a07d28-cb34-42de-b53b-6aaf94fd1883"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Powers"",
            ""id"": ""7b6225d2-372d-4871-83f8-64b9563b08f8"",
            ""actions"": [
                {
                    ""name"": ""Activate Gravity Push"",
                    ""type"": ""Button"",
                    ""id"": ""781219ba-03e2-463e-a8e3-c10ac4f83e41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GravityPull"",
                    ""type"": ""Button"",
                    ""id"": ""8aac374a-5f8b-42cd-8f00-d06a71027f5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GravityFloat"",
                    ""type"": ""Button"",
                    ""id"": ""fb445e83-baac-4abc-94f7-5dbab8d40626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c23bdfe9-c465-434f-bd13-53ea1c9d045d"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Gravity Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13365194-bcfd-4f1a-841f-845821c51c5b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GravityPull"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13775e12-1170-4cd7-86c2-2c46ed2dd43d"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GravityFloat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerBasics
        m_PlayerBasics = asset.FindActionMap("PlayerBasics", throwIfNotFound: true);
        m_PlayerBasics_Move = m_PlayerBasics.FindAction("Move", throwIfNotFound: true);
        m_PlayerBasics_Jump = m_PlayerBasics.FindAction("Jump", throwIfNotFound: true);
        m_PlayerBasics_Look = m_PlayerBasics.FindAction("Look", throwIfNotFound: true);
        // Powers
        m_Powers = asset.FindActionMap("Powers", throwIfNotFound: true);
        m_Powers_ActivateGravityPush = m_Powers.FindAction("Activate Gravity Push", throwIfNotFound: true);
        m_Powers_GravityPull = m_Powers.FindAction("GravityPull", throwIfNotFound: true);
        m_Powers_GravityFloat = m_Powers.FindAction("GravityFloat", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerBasics
    private readonly InputActionMap m_PlayerBasics;
    private IPlayerBasicsActions m_PlayerBasicsActionsCallbackInterface;
    private readonly InputAction m_PlayerBasics_Move;
    private readonly InputAction m_PlayerBasics_Jump;
    private readonly InputAction m_PlayerBasics_Look;
    public struct PlayerBasicsActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerBasicsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerBasics_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerBasics_Jump;
        public InputAction @Look => m_Wrapper.m_PlayerBasics_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBasics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBasicsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerBasicsActions instance)
        {
            if (m_Wrapper.m_PlayerBasicsActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerBasicsActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerBasicsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerBasicsActions @PlayerBasics => new PlayerBasicsActions(this);

    // Powers
    private readonly InputActionMap m_Powers;
    private IPowersActions m_PowersActionsCallbackInterface;
    private readonly InputAction m_Powers_ActivateGravityPush;
    private readonly InputAction m_Powers_GravityPull;
    private readonly InputAction m_Powers_GravityFloat;
    public struct PowersActions
    {
        private @PlayerInput m_Wrapper;
        public PowersActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateGravityPush => m_Wrapper.m_Powers_ActivateGravityPush;
        public InputAction @GravityPull => m_Wrapper.m_Powers_GravityPull;
        public InputAction @GravityFloat => m_Wrapper.m_Powers_GravityFloat;
        public InputActionMap Get() { return m_Wrapper.m_Powers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PowersActions set) { return set.Get(); }
        public void SetCallbacks(IPowersActions instance)
        {
            if (m_Wrapper.m_PowersActionsCallbackInterface != null)
            {
                @ActivateGravityPush.started -= m_Wrapper.m_PowersActionsCallbackInterface.OnActivateGravityPush;
                @ActivateGravityPush.performed -= m_Wrapper.m_PowersActionsCallbackInterface.OnActivateGravityPush;
                @ActivateGravityPush.canceled -= m_Wrapper.m_PowersActionsCallbackInterface.OnActivateGravityPush;
                @GravityPull.started -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityPull;
                @GravityPull.performed -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityPull;
                @GravityPull.canceled -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityPull;
                @GravityFloat.started -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityFloat;
                @GravityFloat.performed -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityFloat;
                @GravityFloat.canceled -= m_Wrapper.m_PowersActionsCallbackInterface.OnGravityFloat;
            }
            m_Wrapper.m_PowersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateGravityPush.started += instance.OnActivateGravityPush;
                @ActivateGravityPush.performed += instance.OnActivateGravityPush;
                @ActivateGravityPush.canceled += instance.OnActivateGravityPush;
                @GravityPull.started += instance.OnGravityPull;
                @GravityPull.performed += instance.OnGravityPull;
                @GravityPull.canceled += instance.OnGravityPull;
                @GravityFloat.started += instance.OnGravityFloat;
                @GravityFloat.performed += instance.OnGravityFloat;
                @GravityFloat.canceled += instance.OnGravityFloat;
            }
        }
    }
    public PowersActions @Powers => new PowersActions(this);
    public interface IPlayerBasicsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
    public interface IPowersActions
    {
        void OnActivateGravityPush(InputAction.CallbackContext context);
        void OnGravityPull(InputAction.CallbackContext context);
        void OnGravityFloat(InputAction.CallbackContext context);
    }
}
